{"version":3,"sources":["index.js"],"names":["App","useState","state","setState","Pomodoro","ShortBreak","LongBreak","props","timeLeft","setTimeLeft","isActive","setIsActive","document","title","formattingTime","getElementById","href","useEffect","intervalId","setInterval","clearInterval","display","setDisplay","id","class","onClick","window","confirm","style","src","timer","minutes","Math","floor","seconds","reactDom","render"],"mappings":"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","file":"static/js/main.d4eb611c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport reactDom from \"react-dom\"\nimport \"./styles.css\"\n\nlet pomodoroTime = 25*60\nlet shortBreakTime = 6*60\nlet longBreakTime = 10*60\n\nconst App = () => {\n  const [state, setState] = useState(\"pomodoro\")\n\n  switch(state) {\n    case \"pomodoro\":\n      return <Pomodoro \n        setState={setState}\n      />\n\n    case \"shortBreak\":\n      return <ShortBreak \n        setState={setState}\n      />\n    \n    case \"longBreak\":\n      return <LongBreak \n        setState={setState}\n      />\n  }\n}\n\nconst Pomodoro = (props) => {\n  const [timeLeft, setTimeLeft] = useState(pomodoroTime)\n  const [isActive, setIsActive] = useState(false) \n  document.title = formattingTime(timeLeft) + \" - Time to work!\"\n  document.getElementById(\"favicon\").href = \"Pomodoro-Timer/pomodoro.ico\"\n\n  useEffect(() => {\n    if (isActive) {\n      if (!timeLeft) {\n        props.setState(\"shortBreak\")\n        return\n      }\n\n      const intervalId = setInterval(() => {\n        setTimeLeft(timeLeft - 1)\n      }, 1000)\n      return () => clearInterval(intervalId)\n\n    } else {\n      setTimeLeft(pomodoroTime)\n    }\n  })\n  const [display, setDisplay] = useState(false)\n\n  return (\n    <div id=\"container\"> \n      <div>\n        <button id=\"pomodoro\" class=\"target\">Pomodoro</button>\n        <button id=\"sBreak\" onClick={() => {\n          if (isActive) {\n            if (window.confirm(\"Sei sicuro di voler cambiare mentre il timer è ancora in funzione?\")) {\n              props.setState(\"shortBreak\")\n            }\n          } else {\n            props.setState(\"shortBreak\")\n          }\n        }}>Short Break</button>\n        <button id=\"lBreak\" onClick={() => {\n          if (isActive) {\n            if (window.confirm(\"Sei sicuro di voler cambiare mentre il timer è ancora in funzione?\")) {\n              props.setState(\"longBreak\")\n            }\n          } else {\n            props.setState(\"longBreak\")\n          }\n        }}>Long Break</button>\n      </div>\n\n      <div id=\"timer\">{formattingTime(timeLeft)}</div>\n\n      <div id=\"buttons\">\n        <button id=\"start\" onClick={() => {\n          setIsActive(true)\n          setDisplay(true)\n        }}>START</button>\n        <button id=\"restart\" style={{display: display ? \"inline\" : \"none\"}} onClick={() => {\n          if (window.confirm(\"Sei sicuro di voler fermare il timer?\")) {\n            setIsActive(false)\n            setDisplay(false)\n          }\n        }}>\n          <img id=\"imgButton\" src=\"Pomodoro-Timer/restart.png\"></img>\n        </button>\n      </div>\n      <p>Time to work!</p>\n    </div>\n  )\n}\n\nconst ShortBreak = (props) => {\n  const [timeLeft, setTimeLeft] = useState(shortBreakTime)\n  const [isActive, setIsActive] = useState(false) \n  document.title = formattingTime(timeLeft) + \" - Time for a break!\"\n  document.getElementById(\"favicon\").href = \"Pomodoro-Timer/shortBreak.ico\"\n\n  useEffect(() => {\n    if (isActive) {\n      if (!timeLeft) {\n        props.setState(\"pomodoro\")\n        return\n      }\n\n      const intervalId = setInterval(() => {\n        setTimeLeft(timeLeft - 1)\n      }, 1000)\n      return () => clearInterval(intervalId)\n\n    } else {\n      setTimeLeft(shortBreakTime)\n    }\n  })\n  const [display, setDisplay] = useState(false)\n\n  return (\n    <div id=\"container\"> \n      <div>\n        <button id=\"pomodoro\" onClick={() => {\n          if (isActive) {\n            if (window.confirm(\"Sei sicuro di voler cambiare mentre il timer è ancora in funzione?\")) {\n              props.setState(\"pomodoro\")\n            }\n          } else {\n            props.setState(\"pomodoro\")\n          }\n        }}>Pomodoro</button>\n        <button id=\"sBreak\" class=\"target\">Short Break</button>\n        <button id=\"lBreak\" onClick={() => {\n          if (isActive) {\n            if (window.confirm(\"Sei sicuro di voler cambiare mentre il timer è ancora in funzione?\")) {\n              props.setState(\"longBreak\")\n            }\n          } else {\n            props.setState(\"longBreak\")\n          }\n        }}>Long Break</button>\n      </div>\n\n      <div id=\"timer\">{formattingTime(timeLeft)}</div>\n\n      <div id=\"buttons\">\n        <button id=\"start\" onClick={() => {\n          setIsActive(true)\n          setDisplay(true)\n        }}>START</button>\n        <button id=\"restart\" style={{display: display ? \"inline\" : \"none\"}} onClick={() => {\n          if (window.confirm(\"Sei sicuro di voler fermare il timer?\")) {\n            setIsActive(false)\n            props.setState(\"pomodoro\")\n          }\n        }}>\n          <img id=\"imgButton\" src=\"Pomodoro-Timer/restart.png\"></img>\n        </button>\n      </div>\n      <p>Time for a break!</p>\n    </div>\n  )\n}\n\nconst LongBreak = (props) => {\n  const [timeLeft, setTimeLeft] = useState(longBreakTime)\n  const [isActive, setIsActive] = useState(false) \n  document.title = formattingTime(timeLeft) + \" - Time for a break!\"\n  document.getElementById(\"favicon\").href = \"Pomodoro-Timer/longBreak.ico\"\n\n  useEffect(() => {\n    if (isActive) {\n      if (!timeLeft) {\n        props.setState(\"pomodoro\")\n        return\n      }\n\n      const intervalId = setInterval(() => {\n        setTimeLeft(timeLeft - 1)\n      }, 1000)\n      return () => clearInterval(intervalId)\n\n    } else {\n      setTimeLeft(longBreakTime)\n    }\n  })\n  const [display, setDisplay] = useState(false)\n\n  return (\n    <div id=\"container\"> \n      <div>\n        <button id=\"pomodoro\" onClick={() => {\n          if (isActive) {\n            if (window.confirm(\"Sei sicuro di voler cambiare mentre il timer è ancora in funzione?\")) {\n              props.setState(\"pomodoro\")\n            }\n          } else {\n            props.setState(\"pomodoro\")\n          }\n        }}>Pomodoro</button>\n        <button id=\"sBreak\" onClick={() => {\n          if (isActive) {\n            if (window.confirm(\"Sei sicuro di voler cambiare mentre il timer è ancora in funzione?\")) {\n              props.setState(\"shortBreak\")\n            }\n          } else {\n            props.setState(\"shortBreak\")\n          }\n        }}>Short Break</button>\n        <button id=\"lBreak\" class=\"target\">Long Break</button>\n      </div>\n\n      <div id=\"timer\">{formattingTime(timeLeft)}</div>\n\n      <div id=\"buttons\">\n        <button id=\"start\" onClick={() => {\n          setIsActive(true)\n          setDisplay(true)\n        }}>START</button>\n        <button id=\"restart\" style={{display: display ? \"inline\" : \"none\"}} onClick={() => {\n          if (window.confirm(\"Sei sicuro di voler fermare il timer?\")) {\n            setIsActive(false)\n            props.setState(\"pomodoro\")\n          }\n        }}>\n          <img id=\"imgButton\" src=\"Pomodoro-Timer/restart.png\"></img>\n        </button>\n      </div>\n      <p>Time for a break!</p>\n    </div>\n  )\n}\n\nconst formattingTime = (timer) => {\n  let minutes = Math.floor(timer/60)\n  let seconds = timer - minutes * 60\n  \n  minutes = minutes < 10 ? `0${minutes}` : minutes\n  seconds = seconds < 10 ? `0${seconds}` : seconds\n  return `${minutes}:${seconds}`\n}\n\nreactDom.render(\n  <App />,\n  document.getElementById(\"container\")\n)"],"sourceRoot":""}